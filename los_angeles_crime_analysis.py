# -*- coding: utf-8 -*-
"""Los Angeles Crime Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ElIdldxfQUaQx6pUgYbCjay0ZCP-FmX8

# **Los Angeles Crime Analysis: 2020-Present**

### **Introduction:**
The Los Angeles Police Department (LAPD) recently transitioned to a new Records Management System for reporting crimes and arrests, aligning with the FBI's NIBRS mandate. This dataset captures incidents of crime in Los Angeles dating back to 2020. Despite some data inaccuracies due to transcription from paper reports, this dataset provides valuable insights into crime trends and patterns in the city.

### **About Dataset:**

*   **Dataset Name:** Los Angeles Crime Data
*   **Updated Metadata:** March 8, 2024
*   **Coverage:** Incidents of crime in Los Angeles from 2020 to present
*   **Source:** Los Angeles Police Department (LAPD)
*   **Purpose:** To comply with the FBI's NIBRS mandate and provide insights into crime trends

**Loading the Dataset**
"""

import pandas as pd

# Assuming your dataset is stored in a CSV file named 'crime_data.csv'
file_path = '/content/Crime_Data_from_2020_to_Present.csv'

# Read the CSV file into a DataFrame
crime_data = pd.read_csv(file_path)

# Display the first few rows of the DataFrame to check if it was read correctly
crime_data

"""**Cleaning the Dataset**"""

# Count missing values in each column
missing_values = crime_data.isnull().sum()

# Display the count of missing values for each column
print(missing_values)

'''This code snippet converts the 'Vict Age' column in the crime dataset to numeric format, filters out all values greater than 0 from the
'Vict Age' column to create a new DataFrame called 'filtered_age', calculates the mean age from the data in the 'filtered_age' DataFrame,
and replaces all values less than or equal to 0 in the original 'Vict Age' column with the calculated mean age.'''

# Convert 'Vict Age' column to numeric
crime_data['Vict Age'] = pd.to_numeric(crime_data['Vict Age'])

# Filter values greater than 0 in 'Vict Age' column
filtered_age = crime_data[crime_data['Vict Age'] > 0]

# Calculate the mean age
mean_age = filtered_age['Vict Age'].mean()

# Replace values <= 0 with the mean age
crime_data.loc[crime_data['Vict Age'] <= 0, 'Vict Age'] = mean_age

# Impute missing values with mean
crime_data['Premis Cd'].fillna(crime_data['Premis Cd'].mean(), inplace=True)

# Check for duplicate rows
duplicate_rows = crime_data.duplicated()

# Count the number of duplicate rows
num_duplicate_rows = duplicate_rows.sum()

# Print the number of duplicate rows
print(f"Number of duplicate rows: {num_duplicate_rows}")

# Describe the dataset
description = crime_data.describe()

# Display the descriptive statistics
print(description)

# Calculate the mode value of the 'Vict Descent' column
mode_value = crime_data['Vict Descent'].mode()[0]

# Replace 'X' with the mode value in the 'Vict Descent' column
crime_data['Vict Descent'] = crime_data['Vict Descent'].replace('X', mode_value)

'''The correlation matrix and heatmap visualize the relationships between variables in crime_data. Positive correlations are shown in warm colors,
negative correlations in cool colors, and neutral correlations in white, providing insights into variable dependencies. High positive values
indicate variables that tend to increase together, while negative values show variables that move in opposite directions.  '''

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Compute the correlation matrix
correlation_matrix = crime_data.corr()

# Plot the correlation matrix as a heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

"""**1. Crime Type Frequency**

Insights from Crime Type Frequency Analysis
The plot illustrates the top 10 most common crime types and their frequency in the dataset. "Vehicle Stolen" stands out as the most frequent crime, indicating a high occurrence rate. It is followed by "Battery - Simple Assault," which also shows a substantial number of incidents.
"""

import pandas as pd
import matplotlib.pyplot as plt

# Assuming 'Crm Cd Desc' column represents the crime types
crime_type_frequency = crime_data['Crm Cd Desc'].value_counts().head(10)  # Get the top 10 most common crime types

# Plotting the crime type frequency using a bar chart
plt.figure(figsize=(12, 8))  # Increase the height of the figure for better y-axis intervals
bars = crime_type_frequency.plot(kind='bar', color='purple')
plt.xlabel('Crime Types')
plt.ylabel('Number of Incidents')
plt.title('Most Common Crime Types and Frequency')

# Annotate the bars with crime type frequency only
for bar in bars.patches:
    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 5,
             f'{bar.get_height()}',  # Include only the frequency
             ha='center', va='bottom', rotation=45)

plt.tight_layout()
plt.show()

"""**2. Age Distribution of Victims**

The histogram showcases the distribution of victim ages in the dataset. A prominent peak is observed around the age of 40, indicating that individuals around this age are more likely to be victims of crimes. This insight suggests a potential demographic trend in crime victimization.
"""

import matplotlib.pyplot as plt
import seaborn as sns

# Age distribution of victims (assuming 'Vict Age' column contains the victim ages)
plt.figure(figsize=(10, 6))
sns.histplot(data=crime_data, x='Vict Age', bins=30, kde=True, color='skyblue')
plt.title('Age Distribution of Victims')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

"""**3. Sex Distribution of Victims**

The bar chart illustrates the distribution of victims based on their sex. Males represent the majority with 47.3%, followed closely by females at 42.1%. This indicates a notable difference in victimization based on gender, with males being slightly more affected in this dataset.
"""

import matplotlib.pyplot as plt
# Assuming 'Vict Sex' column contains victim sexes

# Calculate the percentage distribution
sex_distribution = crime_data['Vict Sex'].value_counts()
sex_percentage = (sex_distribution / sex_distribution.sum()) * 100

# Plotting the bar chart with percentage values
plt.figure(figsize=(8, 8))
bars = sex_distribution.plot(kind='bar', color='salmon')
plt.title('Sex Distribution of Victims')
plt.xlabel('Sex')
plt.ylabel('Number of Victims')
plt.xticks(rotation=0)

# Annotate the bars with both absolute counts and percentages
for i, bar in enumerate(bars.patches):
    plt.text(bar.get_x() + bar.get_width() / 2,
             bar.get_height() + 0.5,  # Adjust vertical position for the text
             f'{sex_distribution[i]}\n({sex_percentage[i]:.1f}%)',  # Format for count and percentage
             ha='center', va='bottom', fontsize=10)  # Adjust fontsize as needed

plt.show()

"""**4. Descent Distribution of Victims**

The bar chart visualizes the distribution of victims based on their descent codes. The Hispanic/Latin/Mexican 'H' shows the highest occurrence, followed by White 'W', Black 'B', Others 'O' and  Asian'A'. This suggests that certain descent groups are more commonly involved in reported incidents compared to others.
"""

import matplotlib.pyplot as plt

# Assuming 'crime_data' is your DataFrame containing the dataset

# Descent distribution of victims (assuming 'Vict Descent' column contains victim descents)
plt.figure(figsize=(10, 6))
descent_distribution = crime_data['Vict Descent'].value_counts()
descent_distribution.plot(kind='bar', color='lightgreen')  # Remove legend=True
plt.title('Descent Distribution of Victims')
plt.xlabel('Descent Code')
plt.ylabel('Number of Victims')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""
**5. Top 10 Weapon Usage in Crimes**

Insights: Strong-arm tactics lead the list, showcasing prevalent physical altercations, with "Unknown Weapons" closely following, indicating challenges in identifying specific weapons used in crimes."""

import matplotlib.pyplot as plt

# Assuming 'crime_data' is your DataFrame containing the dataset
# Assuming 'Weapon Desc' column contains weapon descriptions

# Count the frequency of each weapon type
weapon_usage = crime_data['Weapon Desc'].value_counts().head(10)

# Plotting the bar chart for the top 10 weapon types
plt.figure(figsize=(10, 6))
bars = weapon_usage.plot(kind='bar', color='skyblue')
plt.title('Top 10 Weapon Usage in Crimes')
plt.xlabel('Weapon Type')
plt.ylabel('Frequency')
plt.xticks(rotation=45, ha='right', fontsize=8)  # Adjust font size here
plt.tight_layout()
plt.show()

"""
**6. Crime Statistics Insights**

The average number of crimes per year stands at 57,246, depicting the consistent level of criminal activity.

In terms of hotspots, areas like 77th Street, Pacific, Southwest, and Central show high crime rates, warranting targeted interventions.

On average, victims of these crimes are 39.48 years old, shedding light on the demographics affected by criminal activities."""

import pandas as pd

# Assuming you have a DataFrame named 'crime_data' containing your dataset

# Calculate average crimes per year
average_crimes_per_year = crime_data.groupby(crime_data['DATE OCC'].dt.year)['DR_NO'].count().mean()

# Calculate top hotspot areas
top_hotspot_areas = crime_data['AREA NAME'].value_counts().head(10)

# Calculate average victim age
average_victim_age = crime_data['Vict Age'].mean()

# Print or display the calculated values
print(f'Average Crimes per Year: {average_crimes_per_year:.2f}')
print('\nTop Hotspot Areas:')
print(top_hotspot_areas)
print(f'\nAverage Victim Age: {average_victim_age:.2f}')

"""**7. Crime Analysis Dashboard**

"""

from IPython.display import display, HTML

# Function to create a button-like card-style widget with custom styling
def create_card(title, value, bg_color, text_color):
    card_html = f"""
        <div style="border: none; border-radius: 10px; padding: 20px; margin: 10px;
                     background-color: {bg_color}; color: {text_color}; text-align: center;">
            <h3>{title}</h3>
            <p>{value}</p>
        </div>
    """
    return HTML(card_html)

# Create card widgets for each analysis with custom colors and text values
crime_trends_card = create_card("Average Crimes per Year", f"{average_crimes_per_year:.2f}", "#FF6F61", "#FFFFFF")
hotspot_areas_card = create_card("Top Hotspot Areas", f"{', '.join(top_hotspot_areas.index)}", "#FFD166", "#000000")
victim_demographics_card = create_card("Average Victim Age", f"{average_victim_age:.2f}", "#A0CED9", "#000000")

# Combine the card-style widgets within a single container
combined_widget = f"""
    <div style="display: flex; justify-content: center; align-items: center; gap: 20px;">
        {crime_trends_card.data}
        {hotspot_areas_card.data}
        {victim_demographics_card.data}
    </div>
"""

# Display the combined widget
display(HTML(combined_widget))

'''The command "!pip install plotly" installs the Plotly library, which is used for interactive data visualization and creating interactive plots
and dashboards in Python.'''

!pip install plotly

"""
**8. Top Ten Crime Hotspot Areas in Los Angeles**
This scatter mapbox plot visualizes the top ten crime hotspot areas in Los Angeles based on a sampled fraction of the crime data.

Each marker represents a location within these areas, with color indicating the specific area name.

The map provides an overview of crime distribution across these hotspot areas, aiding in spatial analysis and identifying high-risk zones."""

import plotly.express as px

# Sample a fraction of the data (e.g., 10%)
sampled_crime_data = crime_data.sample(frac=0.1)

# Get the top ten areas
top_ten_areas = sampled_crime_data['AREA NAME'].value_counts().nlargest(10).index

# Filter the sampled data to include only the top ten areas
top_ten_data = sampled_crime_data[sampled_crime_data['AREA NAME'].isin(top_ten_areas)]

# Create a scatter mapbox plot using plotly
fig = px.scatter_mapbox(
    top_ten_data,
    lat='LAT',
    lon='LON',
    hover_name='LOCATION',
    color='AREA NAME',
    zoom=10,
    height=800,
    title='Top Ten Crime Hotspot Areas in Los Angeles',
    labels={'AREA NAME': 'Area Name'}
)

# Update the map style
fig.update_layout(mapbox_style='carto-darkmatter')

# Customize marker properties
fig.update_traces(marker=dict(size=8, opacity=0.8))

# Show the map
fig.show()

"""# **Conclusion:**

The analysis of Los Angeles crime data from 2020 to present highlights several critical insights for law enforcement and public safety efforts.

"Vehicle Stolen" emerges as the most frequent crime, indicating a pressing concern for property theft, followed closely by "Battery - Simple Assault," underscoring the need for interventions to address interpersonal violence.

Demographically, individuals around the age of 40 are notably more susceptible to crime, suggesting targeted support and safety measures for this age group.

Additionally, the data reveals a slight gender difference in victimization, with males being slightly more affected by crime compared to females. Certain descent groups, particularly Hispanic/Latin/Mexican, are disproportionately involved in reported incidents.

The prevalence of strong-arm tactics and unknown weapons poses challenges in crime prevention and investigation. Spatial analysis identifies high crime rates in areas like 77th Street, Pacific, Southwest, and Central, necessitating focused interventions and law enforcement efforts.

Despite data inaccuracies, the dataset provides valuable insights into crime trends, aligning with the FBI's NIBRS mandate and facilitating data-driven decision-making for crime prevention strategies.
"""